Shit, I should probably think about the fact that this is public. Especially since I'm often leaving notes about really basic stuff- probably embarrassing. Oh well, not much to be done I guess.

===============

Should probably tweak UI so that stuff that's on the right hand side is aligned appropriately
Also should handle window resizing
Haven't implemented much in the way of error handling. Will need to fix that

Should probably add an option to save the results in a more human readable format. Ideally sort by power, possibly against an uninvested neutral Arc.

NOTE
Will probably want to transpose a version of this app into my fork of the damage calc, polish that up a little and then maybe submit a pull request

Consider adding a progress bar or something
Consider scrapping this entirely. I plan on replicating this on the website as well, which would kinda supplant this? Wait nvm, the website one is too limited (e.g. it will restrict to only one set per mon, which isn't totally adequate)

Will be commenting TEST and ISSUE where appropriate. Remove all tests when done with them, while issues should be dealt with eventually. TWEAK is for stuff that works, but is done in a really stupid manner. UNTESTED is purely for when I decide I'm due to back this up to github, but I'm in the middle of working on stuff

===================================================
I *think* all the code processing stats works now, although it is somewhat untested

Have only tested for 3.41% usg, 4 moves, 1 ability, 1 item, 1 spread. Further testing required. Need to test usg for moves/abilities/items/spreads, ranks for pokemon. Need to test having both rank and usg as criteria. Need to test for multiple entries moves/items/spreads/abilities.

Strongly suspect more needs to be done in securing this program- this is something I frequently overlook with these projects because they usually only run locally, but this does connect to the internet so I should really be mindful of this kind of thing

==========================================
I'm not going to see this through to completion. All I want is for it to be usable. Generating importables is probably the easiest way to go, since it is readily usable with my fork of the damage calculator. JSON is unsupported by my calculator, so I won't bother with that. Generating a readable list is the ideal option, but in order for it to be usable, it would take a deceptive amount of work, as the list must be sortable by move power. Type efficacy would also be ideal.

Also consider going back and tinkering with the damage calc further so that it displays results for all moves, rather than just the ones with the most damage

Sorting:
>Requires function with damage formula
>The damage formula should arbitrarily decide the otherwise random value- whether max or min roll doesn't matter as it's all relative anyway
>Requires bp and phys/spec data for all attacking moves. This is easiest to obtain from the damage calc, but it's in js and each successive generation inherits from the prior gen, idk if that'd make a difference
>Many moves have variable power (e.g. Gyro Ball, Water Spout). It varies as to whether or not assuming max power is sensible (probably worthwhile for WSpout, not so much for GBall)
>Must account for generational differences
>Must account for unusual mechanics (e.g. Explosion in g1-4). This is easiest to determine by going through the appropriate damage.js file in the damage calc. All the weird stuff seems to be in CALCULATE_DAMAGE_[gen] or getDamageResult in current gen. There's probably a library to handle js, but the amount of information required is very significant either way, and adding it all would be a lot of work. Actually, come to think of it if I just add a popup with gen input and space for importable that could work, since moveset_import.js could handle all that (EDIT probably not, there are other files it is dependent on)
>Requires generation input
>Requires some sort of benchmark. I'm going to say an uninvested mon with base 100 stats. At the very least, SToss and NShade dont really work well with a benchmark though.

Type efficacy:
>Requires type chart for each gen
>Requires type input... obviously
>Requires type for each move... obviously

https://stackoverflow.com/questions/44498693/how-to-call-js-function-from-c-sharp-wpf
This is a good idea tbh. Could just include my version of the damage calc and either dump data directly into it via importable or use its scripts to generate regular list
https://stackoverflow.com/questions/10176556/run-javascript-in-c-sharp-wpf-form?lq=1
This is also interesting

Also if I do decide to keep the calculator files in my project, I'd want a way of keeeping them updated
https://stackoverflow.com/questions/1871282/nested-git-repositories
https://git-scm.com/book/en/v2/Git-Tools-Submodules
https://www.atlassian.com/blog/git/alternatives-to-git-submodule-git-subtree